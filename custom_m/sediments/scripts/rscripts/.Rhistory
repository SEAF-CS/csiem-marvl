knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
#options(tinytex.verbose = TRUE),
fig.width = 13,
fig.height = 7
)
# Load required library
library(ggplot2)
library(lubridate)
#library(grid)
#library(gridExtra)
#library(gtable)
library(dplyr)
library(ggpubr)
# Load observed TSS data into a dataframe, assuming it is in a csv file named "data.csv"
resfile<-"../../data/MAFRL_TSS_2013.csv"
df_observed<-read.csv(file=resfile,header=TRUE)
# Convert the Date column to a date format
df_observed$Date <- dmy(df_observed$Date)
# Replace empty cells with NA
df_observed[df_observed == ""] <- NA
# Get a list of unique sites
sites <- unique(df_observed$Site)
df_observed <- df_observed %>%
filter(!is.na(TSS)) %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
df_observed$Date <- as.POSIXct(df_observed$Date, format = "%Y-%m-%d")
head(df_observed)
# Load modelled TSS data into a dataframe
resfile<-"../../data/CSound_000_A14_20130101_20140101_SED_016_warmup_POINTS.csv"
df_modelled<-read.csv(file=resfile,header=TRUE)
# Select columns for time and TSS data for each site
df_modelled<-df_modelled %>%
dplyr::select(matches(c("TIME","TSS")))
names(df_modelled) = gsub(pattern = "_TSS..mg.L..1.", replacement = "", x = names(df_modelled))
#Tss observed data available only for these sites.
site<-c("CS6A","CS7","CS11","MB","WS4")
# Select columns for time and TSS data for each site only for observed data available sites
df_modelled<-df_modelled %>%
dplyr::select("TIME",site)
# Fix '<NA>' values in the TIME column
df_modelled$TIME <- as.POSIXct(df_modelled$TIME, format = "%d/%m/%Y %H:%M:%S")
#df_modelled$TIME <- as.POSIXct(df_modelled$TIME, format = "%Y-%m-%d")
head(df_modelled)
#View(df_modelled)
plot_site <- function(site) {
df_obs_site <- df_observed %>% filter(Site == site)
df_mod_site <- df_modelled %>% select(TIME, site) %>% rename(Date = TIME, TSS = site)
y_limit <- max(df_observed$TSS)
ggplot() +
geom_point(data = df_obs_site, aes(x = Date, y = TSS, color = "Observed"), shape = 16) +
geom_line(data = df_mod_site, aes(x = Date, y = TSS, color = "Modelled")) +
theme_bw() +
xlab("")+
theme(legend.position = "bottom",axis.text.x=element_text(size = 10,angle = 60, hjust = 1))+
scale_y_continuous(limits = c(0, y_limit), expand = c(0, 0)) +
ggtitle(site)+
scale_color_manual(name = "Data Type",
labels = c("Observed", "Modelled"),
values = c("#e20177", "#00537f"))
}
sites <- unique(df_observed$Site)
p1 <- plot_site(sites[1])
p2 <- plot_site(sites[2])
p3 <- plot_site(sites[3])
p4 <- plot_site(sites[4])
#Combine the plots into a single figure with 4 subplots
grid.arrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
#options(tinytex.verbose = TRUE),
fig.width = 13,
fig.height = 7
)
# Load required library
library(ggplot2)
library(lubridate)
library(grid)
library(gridExtra)
#library(gtable)
library(dplyr)
library(ggpubr)
# Load observed TSS data into a dataframe, assuming it is in a csv file named "data.csv"
resfile<-"../../data/MAFRL_TSS_2013.csv"
df_observed<-read.csv(file=resfile,header=TRUE)
# Convert the Date column to a date format
df_observed$Date <- dmy(df_observed$Date)
# Replace empty cells with NA
df_observed[df_observed == ""] <- NA
# Get a list of unique sites
sites <- unique(df_observed$Site)
df_observed <- df_observed %>%
filter(!is.na(TSS)) %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
df_observed$Date <- as.POSIXct(df_observed$Date, format = "%Y-%m-%d")
head(df_observed)
# Load modelled TSS data into a dataframe
resfile<-"../../data/CSound_000_A14_20130101_20140101_SED_016_warmup_POINTS.csv"
df_modelled<-read.csv(file=resfile,header=TRUE)
# Select columns for time and TSS data for each site
df_modelled<-df_modelled %>%
dplyr::select(matches(c("TIME","TSS")))
names(df_modelled) = gsub(pattern = "_TSS..mg.L..1.", replacement = "", x = names(df_modelled))
#Tss observed data available only for these sites.
site<-c("CS6A","CS7","CS11","MB","WS4")
# Select columns for time and TSS data for each site only for observed data available sites
df_modelled<-df_modelled %>%
dplyr::select("TIME",site)
# Fix '<NA>' values in the TIME column
df_modelled$TIME <- as.POSIXct(df_modelled$TIME, format = "%d/%m/%Y %H:%M:%S")
#df_modelled$TIME <- as.POSIXct(df_modelled$TIME, format = "%Y-%m-%d")
head(df_modelled)
#View(df_modelled)
plot_site <- function(site) {
df_obs_site <- df_observed %>% filter(Site == site)
df_mod_site <- df_modelled %>% select(TIME, site) %>% rename(Date = TIME, TSS = site)
y_limit <- max(df_observed$TSS)
ggplot() +
geom_point(data = df_obs_site, aes(x = Date, y = TSS, color = "Observed"), shape = 16) +
geom_line(data = df_mod_site, aes(x = Date, y = TSS, color = "Modelled")) +
theme_bw() +
xlab("")+
theme(legend.position = "bottom",axis.text.x=element_text(size = 10,angle = 60, hjust = 1))+
scale_y_continuous(limits = c(0, y_limit), expand = c(0, 0)) +
ggtitle(site)+
scale_color_manual(name = "Data Type",
labels = c("Observed", "Modelled"),
values = c("#e20177", "#00537f"))
}
sites <- unique(df_observed$Site)
p1 <- plot_site(sites[1])
p2 <- plot_site(sites[2])
p3 <- plot_site(sites[3])
p4 <- plot_site(sites[4])
#Combine the plots into a single figure with 4 subplots
grid.arrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
plot_site <- function(site) {
df_obs_site <- df_observed %>% filter(Site == site)
head(df_obs_site)
df_mod_site <- df_modelled %>% select(TIME, site) %>% rename(Date = TIME, TSS = site)
ggplot() +
geom_point(data = df_obs_site, aes(x = Date, y = TSS), shape = 16, color = "#e20177") +
geom_line(data = df_mod_site, aes(x = Date, y = TSS), color = "#00537f") +
theme_bw()+
xlab("2013")+
ggtitle(site)
#scale_y_continuous(limits = c(0, y_limit), expand = c(0,0))
}
sites <- unique(df_observed$Site)
#y_limit <- max(c(df_observed$TSS, unlist(df_modelled[, sites])))
p1 <- plot_site(sites[1])
p2 <- plot_site(sites[2])
p3 <- plot_site(sites[3])
p4 <- plot_site(sites[4])
grid.arrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
plot_site <- function(site) {
df_obs_site <- df_observed %>% filter(Site == site)
df_mod_site <- df_modelled %>% select(TIME, site) %>% rename(Date = TIME, TSS = site)
y_limit <- max(df_observed$TSS)
ggplot() +
geom_point(data = df_obs_site, aes(x = Date, y = TSS, color = "Observed"), shape = 16) +
geom_line(data = df_mod_site, aes(x = Date, y = TSS, color = "Modelled")) +
theme_bw() +
xlab("")+
#theme(legend.position = "none",axis.text.x=element_text(size = 10,angle = 60, hjust = 1))+
theme(legend.position = "none",axis.text.x=element_text(size = 10))+
scale_y_continuous(limits = c(0, y_limit), expand = c(0, 0)) +
ggtitle(site)+
scale_color_manual(name = "",
labels = c("Observed", "Modelled"),
values = c("#e20177", "#00537f"))
}
sites <- unique(df_observed$Site)
# Define the individual plots
p1 <- plot_site(sites[1])
p2 <- plot_site(sites[2])
p3 <- plot_site(sites[3])
p4 <- plot_site(sites[4])
# Remove legends from the plots
p1 <- p1 + theme(legend.position = "none")
p2 <- p2 + theme(legend.position = "none")
p3 <- p3 + theme(legend.position = "none")
p4 <- p4 + theme(legend.position = "none")
# Combine the plots
grid.arrange(arrangeGrob(p1, p2, p3, p4, ncol = 2), bottom = legend, heights = unit(c(4, 1), "inch"))
# Define the get_legend function
get_legend <- function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
# Define the plot_site function
plot_site <- function(site) {
df_obs_site <- df_observed %>% filter(Site == site)
df_mod_site <- df_modelled %>% select(TIME, site) %>% rename(Date = TIME, TSS = site)
y_limit <- max(df_observed$TSS+1)
ggplot() +
geom_point(data = df_obs_site, aes(x = Date, y = TSS, color = "Observed"), shape = 16) +
geom_line(data = df_mod_site, aes(x = Date, y = TSS, color = "Modelled")) +
theme_bw() +
xlab("")+
theme(legend.position = "none",axis.text.x=element_text(size = 10,angle = 30, hjust = 1))+
scale_y_continuous(limits = c(0, y_limit), expand = c(0, 0)) +
ggtitle(site)+
scale_color_manual(name = "",
labels = c("Modelled","Observed"),
values = c("#00537f", "#e20177"))
}
# Define the legend plot function
plot_legend <- function(legend_labels, legend_colors) {
n_labels <- length(legend_labels)
legend_df <- data.frame(label = rep(legend_labels, each = 2),
value = rep(1:n_labels, each = 2),
color = rep(legend_colors, each = 2))
ggplot(legend_df, aes(x = value, y = 1, color = color, label = label)) +
geom_point(size = 0) +
geom_text(size = 5, nudge_y = -0.2) +
scale_color_manual(values = legend_colors) +
theme_void() +
theme(legend.position = "bottom", legend.direction = "horizontal")
}
# Get unique sites
sites <- unique(df_observed$Site)
# Create plots
p1 <- plot_site(sites[1])
p2 <- plot_site(sites[2])
p3 <- plot_site(sites[3])
p4 <- plot_site(sites[4])
# Create legend plot
legend_labels <- c("Modelled","Observed")
legend_colors <- c("#00537f", "#e20177")
legend_plot <- plot_legend(legend_labels, legend_colors)
# Arrange the plots in a 2x2 grid with a common legend at the bottom
comb_plot<-ggarrange(p1, p2, p3, p4, ncol = 2, nrow = 2,
common.legend = TRUE, legend = "bottom")
comb_plot
ggsave(filename="../../plots/TSS_timeseries/TSS_timeseries_obs_vs_mod_2013.png",plot=comb_plot)
